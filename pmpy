#!/usr/bin/env python3

# -----------------------------------------------------------------------------------------
# A re-write of my original pm shell script in python for higher portability and 
# cleaner code and debuggability.

# pm is a script that is meant to act as a status tracker for my projects. It will
# use VCS integration to provide in-depth information on all projects.
# Cheers.

# Author : canopeerus
# License : MIT

# ----------------------------------------------------------------------------------------

# available options : 
# -m <status of project>    :       set status of project
# -l                        :       list all active projects with status
# -i                        :       populate project list for first try
# -d                        :       delete entire database
# -h                        :       display help
# -v                        :       display version info

# available options for project status : active,inactive,abandoned,complete.

# Project names are usually lower case words with no spaces.

# -----------------------------------------------------------------------------------------

import os
import sys
import json
import getopt

# some shitty global variable declarations for directory and file locations
# will need to clean this up to not make these options hardcoded
homedir = os.getenv("HOME")
dbdir = homedir + "/.config//pm"
dbfil = dbdir + "/db.json"
dbfil_old = dbfil + ".old"
prog_ver = "0.0.1"

# function declarations
def query_yes_no(question, default="yes"):
    """Ask a yes/no question via input() and return their answer.

    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits <Enter>.
        It must be "yes" (the default), "no" or None (meaning
        an answer is required of the user).

    The "answer" return value is True for "yes" or False for "no".
    """
    valid = {"yes": True, "y": True, "ye": True,
             "no": False, "n": False}
    if default is None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)
    while True:
        sys.stdout.write(question + prompt)
        choice = input().lower()
        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write("Please respond with 'yes' or 'no' "
                             "(or 'y' or 'n').\n")

def print_help():
    sys.stdout.write("usage : pm [-ildhv] [ -m active,inactive,abandoned,complete]\n")
    sys.exit(1)

def delete_db():
    if os.path.isfile(dbfil):
        if query_yes_no("Are you sure you want to delete the database?"):
            os.remove(dbfil)
        else:
            sys.stdout.write("Operation aborted\n")
            sys.exit(1)
    else:
        sys.stdout.write("Database not found. Run pm -i to populate database.\n")

def print_version():
    sys.stdout.write("pm version:"+prog_ver+"\n")
    sys.stdout.write("License:MIT\n")
    sys.exit(1)

def backup_old_db():
    os.remove(dbfil_old)
    os.rename(dbfil,dbfil_old)
    os.remove(dbfil)
    
def pm_db_init():
    if os.path.isfile(dbfil) and os.path.isfile(dbfil_old):
        print("There is a database file and a backup file already available!!")
        user_choice1 = query_yes_no("Delete old db and backup current db file?")
        if user_choice1 == True:
            backup_old_db()
        else:
            sys.stdout.write("Operation aborted!\n")
            sys.exit(2)
    else:
        print("Project database not found")

def main_func(argv):
    try:
        options,args = getopt.getopt(argv,"hdiv:",["help","delete","init","version"])
    except getopt.GetoptError:
        sys.stdout.write("Unsupported option\n")
        print_help()
    if len(argv) == 0:
        sys.stdout.write("Insufficient arguments\n")
        print_help()
    for opt,arg in options:
        if opt in ("-h","--help"):
            print_help()
        elif opt in ("-v","--version"):
            print_version()
        elif opt in ("-i","--init"):
            pm_db_init()
        elif opt in ("-d","--delete"):
            delete_db()
            sys.exit(2)

main_func(sys.argv[1:])        
